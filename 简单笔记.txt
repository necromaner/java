Final 
final修饰的类不能被继承。

Sting就是一个被final修饰的类，我们只能用，不用继承

final不仅可以修饰类，还可以修饰变量，被final修饰的变量就是一个常量，只能赋值一次

answer = Integer.parseInt(answer1);  String变int

Integer.MAX_VALUE   Integer.MIN_VALUE  边界最大最小值

answer1 = str.substring(min, min+1);    截取String中第i到I的数给前面的

arr = Arrays.copyOf(arr, arr.length+1);    数组的扩容方式

一个方法名，参数不同，这叫方法重载。(Overload)void foo(String str);
void foo(int number);
父类与子类有同样的方法名和参数，这叫方法覆盖。(Override)class Parent {
    void foo() {
        System.out.println("Parent foo()");
    }
}
class Child extends Parent {
    void foo() {
        System.out.println("Child foo()");
    }
}
父类引用指向子类对象，调用方法时会调用子类的实现，而不是父类的实现，这叫多态。Parent instance = new Child();
instance.foo(); //==> Child foo()
我理解的多态与继承体系有关，与方法覆盖有关，与方法重载无关。


Arrays.sort()        排序（升序）

System.arraycopy(源数组名称，源数组开始点， 目标数组名称，目标数组开始点，拷贝长度)  数组替换数组部分内容（把源中部分内容给目标）





