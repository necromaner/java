
一、继承：继承这个类之后，就具有父类当中的属性和方法，子类就不会存在重复的代码，维护性也提高，代码也更加简洁，提高代码的复用性（复用性主要是可以多次使用，不用再多次写同样的代码） 

二、方法重载：一个类中有一个方法A，你又在这个类中创建了一个方法B，方法B的名字和A一样，返回值类型也一样，但是参数的类型或个数不同，此时B重载了A。
方法重写：一个类M继承另一个类N，N中有一个方法A，这时你在M写了一个方法B，方法B的名字、返回值以及参数都和A一样，此时B重写了A。

多态：父类引用指向子类对象，调用方法时会调用子类的实现，而不是父类的实现，这叫多态。
Parent instance = new Child();
instance.foo(); //==> Child foo()
我理解的多态与继承体系有关，与方法覆盖有关，与方法重载无关。

那么我们可以根据以上情况总结出多态成员访问的特点：
    成员变量
    编译看左边(父类),运行看左边(父类)
    成员方法
    编译看左边(父类)，运行看右边(子类)。动态绑定
            静态方法
    编译看左边(父类)，运行看左边(父类)。
            (静态和类相关，算不上重写，所以，访问还是左边的)

https://www.zhihu.com/question/30082151

三、接口和抽象类都是继承树的上层，他们的共同点如下：
1)	都是上层的抽象层。
2)	都不能被实例化
3)	都能包含抽象的方法，
这些抽象的方法用于描述类具备的功能，但是不比提供具体的实现。
他们的区别如下：
1)	在抽象类中可以写非抽象的方法，从而避免在子类中重复书写他们，这样可以提高代码的复用性，这是抽象类的优势；接口中只能有抽象的方法。
2)	一个类只能继承一个直接父类，这个父类可以是具体的类也可是抽象类；但是一个类可以实现多个接口。

四、list 和set 有共同的父类 它们的用法也是一样的 唯一的不太就是set中不能有相同的元素 list中可以
list和set的用途非常广泛 list可以完全代替数组来使用
map 是独立的合集 它使用键值对的方式来储存数据 键不能有重复的 值可以用 
map不像上边两种集合那个用的广泛 不过在servlet 和jsp中 map可是绝对的重中之重 页面之间传值全靠map

五、==与equals的主要区别是：==常用于比较原生类型，而equals()方法用于检查对象的相等性。另一个不同的点是：如果==和equals()用于比较对象，当两个引用地址相同，==返回true。而equals()可以返回true或者false主要取决于重写实现。最常见的一个例子，字符串的比较，不同情况==和equals()返回不同的结果。
值类型（int,char,long,boolean等）都是用==判断相等性。
对象引用的话，==判断引用所指的对象是否是同一个。

六、Servlet生命周期包含了以下几个阶段：Servlet 加载--->实例化--->服务--->销毁。
1.加载和实例化
当检测到需要Servlet的第一个请求时，读取xml文件找到要加载的servlet类，创建Servlet实例。 加载一般是在运行tomcat容器时来完成，将servlet类加载到tomcat中，或者是客户端发来请求时也可以
2.初始化
初始化信息一般是读取配置信息、读取初始化参数等，对于每一个servlet实例，inin()方法值被调用一次。
3.请求处理
调用Servlet的service()方法对请求进行处理，在调用该方法之前，init()方法必须先成功执行。根据请求的到来，service（）方法决定请求的请求，常用的是goGet(),或doPost().
4.销毁
销毁一般是Servlet的卸载是由容器本身定义和实现，在destroy()方法调用后，容器释放对应的Servlet请求。实例随后会被Java的垃圾收集器所回收，整个Servlet的生命周期结束。一般tomcat关闭，servlet就会被销毁



Web Client 向Servlet容器（Tomcat）发出Http请求
Servlet容器接收Web Client的请求
Servlet容器创建一个HttpRequest对象，将Web Client请求的信息封装到这个对象中。
Servlet容器创建一个HttpResponse对象
Servlet容器调用HttpServlet对象的service方法，把HttpRequest对象与HttpResponse对象作为参数传给 HttpServlet 对象。
HttpServlet调用HttpRequest对象的有关方法，获取Http请求信息。
HttpServlet调用HttpResponse对象的有关方法，生成响应数据。
Servlet容器把HttpServlet的响应结果传给Web Client。

Servlet生命周期的3个方法：
init()方法：Servlet实例化时调用此方法
Service()方法：客户请求和响应调用此方法。
Destroy()方法：释放内存，关闭web服务器调用此方法。

工作原理：
1、首先简单解释一下Servlet接收和响应客户请求的过程，首先客户发送一个请求，Servlet是调用service()方法对请求进行响应的，service()方法中对请求的方式进行了匹配，选择调用doGet,doPost等这些方法，然后再进入对应的方法中调用逻辑层的方法，实现对客户的响应。我们每次定义一个Servlet的时候，都必须实现doGet或doPost等这些方法。
2、每一个自定义的Servlet都必须实现Servlet的接口，Servlet接口中定义了五个方法，其中比较重要的三个方法涉及到Servlet的生命周期，分别是init(),service(),destroy()方法。GenericServlet是一个通用的，不特定于任何协议的Servlet,它实现了Servlet接口。而HttpServlet继承于GenericServlet，因此HttpServlet也实现了Servlet接口。所以我们定义Servlet的时候只需要继承HttpServlet即可。
3、Servlet接口和GenericServlet是不特定于任何协议的，而HttpServlet是特定于HTTP协议的类，所以HttpServlet中实现了service()方法，并将请求ServletRequest、ServletResponse 强转为HttpRequest 和 HttpResponse。

Servlet单实例、多线程
servlet中的init方法只有在启动（例如一个查询用户信息的请求和一个删除用户的请求共享同一个servlet对象）的时候调用，也就是只初始化一次，这就是单实例。
一个web容器可以管理或存放多个servlet，比如：用户管理的servlet，商品管理的servlet等，servlet体系结构是建立在java多线程机制之上的，servlet容器会自动使用线程池等技术来支持系统的运行。web 容器本身就是提供的多线程。

七、创建一个以JDBC连接数据库的程序，包含7个步骤：    
1、JDBC所需的四个参数（user，password，url，driverClass）

（1）user用户名

（2）password密码

（3）URL定义了连接数据库时的协议、子协议、数据源标识。    
    •书写形式：协议：子协议：数据源标识    
    协议：在JDBC中总是以jdbc开始    
    子协议：是桥连接的驱动程序或是数据库管理系统名称。    
    数据源标识：标记找到数据库来源的地址与连接端口。    
    例如：（MySql的连接URL）    
    jdbc:mysql:    
        //localhost:3306/test?useUnicode=true&characterEncoding=gbk ;    
   useUnicode=true：表示使用Unicode字符集。如果characterEncoding设置为    
   gb2312或GBK，本参数必须设置为true 。characterEncoding=gbk：字符编码方式。

（4）driverClass连接数据库所需的驱动。

2、加载JDBC驱动程序：    
    在连接数据库之前，首先要加载想要连接的数据库的驱动到JVM（Java虚拟机），    
    这通过java.lang.Class类的静态方法forName(String  className)实现。    
    例如：    
    try{    
    //加载MySql的驱动类    
    Class.forName("com.mysql.jdbc.Driver") ;    
    }catch(ClassNotFoundException e){    
    System.out.println("找不到驱动程序类 ，加载驱动失败！");    
    e.printStackTrace() ;    
    }    
   成功加载后，会将Driver类的实例注册到DriverManager类中。    
  
3、创建数据库的连接    
    •要连接数据库，需要向java.sql.DriverManager请求并获得Connection对象，    
     该对象就代表一个数据库的连接。    
    •使用DriverManager的getConnectin(String url , String username ,     
    String password )方法传入指定的欲连接的数据库的路径、数据库的用户名和    
     密码来获得。    
     例如：    
     //连接MySql数据库，用户名和密码都是root    
     String url = "jdbc:mysql://localhost:3306/test" ;     
     String username = "root" ;    
     String password = "root" ;    
     try{    
    Connection con =     
             DriverManager.getConnection(url , username , password ) ;    
     }catch(SQLException se){    
    System.out.println("数据库连接失败！");    
    se.printStackTrace() ;    
     }    
4、创建一个preparedStatement    
    •要执行SQL语句，必须获得java.sql.Statement实例，Statement实例分为以下3   
     种类型：    
      1、执行静态SQL语句。通常通过Statement实例实现。    
      2、执行动态SQL语句。通常通过PreparedStatement实例实现。    
      3、执行数据库存储过程。通常通过CallableStatement实例实现。    
    具体的实现方式：    
        Statement stmt = con.createStatement() ;    
       PreparedStatement pstmt = con.prepareStatement(sql) ;    
       CallableStatement cstmt =     
                            con.prepareCall("{CALL demoSp(? , ?)}") ;    
5、执行SQL语句    
    Statement接口提供了三种执行SQL语句的方法：executeQuery 、executeUpdate    
   和execute    
    1、ResultSet executeQuery(String sqlString)：执行查询数据库的SQL语句    
        ，返回一个结果集（ResultSet）对象。    
     2、int executeUpdate(String sqlString)：用于执行INSERT、UPDATE或    
        DELETE语句以及SQL DDL语句，如：CREATE TABLE和DROP TABLE等    
     3、execute(sqlString):用于执行返回多个结果集、多个更新计数或二者组合的    
        语句。    
   具体实现的代码：    
          ResultSet rs = stmt.executeQuery("SELECT * FROM ...") ;    
    int rows = stmt.executeUpdate("INSERT INTO ...") ;    
    boolean flag = stmt.execute(String sql) ;    
6、遍历结果集    
    两种情况：    
     1、执行更新返回的是本次操作影响到的记录数。    
     2、执行查询返回的结果是一个ResultSet对象。    
    • ResultSet包含符合SQL语句中条件的所有行，并且它通过一套get方法提供了对这些    
      行中数据的访问。    
    • 使用结果集（ResultSet）对象的访问方法获取数据：    
     while(rs.next()){    
         String name = rs.getString("name") ;    
    String pass = rs.getString(1) ; // 此方法比较高效    
     }    
    （列是从左到右编号的，并且从列1开始）    
7、处理异常，关闭JDBC对象资源     
     操作完成以后要把所有使用的JDBC对象全都关闭，以释放JDBC资源，关闭顺序和声    
     明顺序相反：    
     1、先关闭requestSet    
     2、再关闭preparedStatement    
     3、最后关闭连接对象connection    
          if(rs != null){   // 关闭记录集    
        try{    
            rs.close() ;    
        }catch(SQLException e){    
            e.printStackTrace() ;    
        }    
          }    
          if(stmt != null){   // 关闭声明    
        try{    
            stmt.close() ;    
        }catch(SQLException e){    
            e.printStackTrace() ;    
        }    
          }    
          if(conn != null){  // 关闭连接对象    
         try{    
            conn.close() ;    
         }catch(SQLException e){    
            e.printStackTrace() ;    
         }    
          }  
1.注册驱动
Class.forname("com.mysql.jdbc.Driver");//这是连接mysql数据库的驱动
2.获取数据库连接
java.sql.Connection conn=java.sql.DriverManager.getConnection(); 
3.获取表达式
java.sql.Statement  stmt=conn.createStatement("jdbc:mysql://localhost/test?useUnicode=true&characterEncoding=GBK","root","null");//三个参数分别是数据库连接的URL,用户名，密码 4.执行SQL
java.sql.ResultSet   rs=stmt.executeQuery("select * from user"); 
5.显示结果集里面的数据
while(rs.next()){
 System.out.println(rs.getInt(1));
 System.out.println(rs.getString("username"));
 System.out.println(rs.getString("password"));
 System.out.pringln();
}//执行插入语句
//stmt.executeUpdate("insert into user values(1,'中文','345')");
6.释放资源
rs.close();
stmt.close();
conn.close();